add_img_or_custom: 'i' # 'a' for adder, 'c' for custom, 'i' for image classifie
  # convs: [[2,1,12,27],
  #         [3,3,24,9],
  #         [3,3,48,3],
  #         [3,3,96,1]]  # only for image, tuples of width, stride, channels, new_size
convs: []
pool_filters: []
extra_layers: [[1,1]] # for everything but images
schedule_scale: 1
lr_dense: [0.01, 0.003, 0.001, 0.0003, 0.0001]
lr_conv: [0.1]
global_weights: True
dense_distribution: "normal_sampler1" # choose from beta_sampler, normal_sampler1, normal_sampler2
conv_distribution: "normal_sampler1"
dense_sigma: 3.5 # must be less than 1 for beta_sampler
dense_k: 0.6 # only applies for normal_sampler2
conv_sigma: 3.5
conv_k: 0.955
taper_q: 'c' # 't' to exponentially decrease the number of neurons in each layer, 'l' to linearly decrease, 'f' for a set width and depth, 'c' for custom
taper: 0.5
architecture: [64, 48]
width: 100
hidden: 2
temperature: 0.5
max_fan_in_penalty_coeff: 0
max_fan_in: 2
mean_fan_in_penalty_coeff: 0
mean_fan_in: 2
max_gates_used_penalty_coeff: 0 # if using l3 or l5, check the gate usage output - if they're all integers, these will not work, you must increase the temperature
max_gates: [10, 3, 2, 1]
min_gates_used_penalty_coeff: 0 # similary, if the difference between the discrete and continuous gate usage output is too big, decrease the temperature (and/or increase l4_coeff)
min_gates: [0, 0, 1, 1]
continuous_penalty_coeff: 0.0
decimal_places: 5
batches: 5000 #Should be a factor of the number of samples
timeout: 60 # in minutes
bits: 2 # only for adders
specific: True
first_i: 1
last_i: 2
out_bits: 1 # only for adders (should be at most bits+1)
add_adder_help: True # only for adders
with_nots: True # only for adders
use_surr: False # only for adders
surr_bits: 5
surr_arr: [[[[0, 6], [0, 20], [0, 23], [0, 26]], [[0, 11], [0, 26]], [[0, 35]], [[0, 32]], [[0, 21]], [[0, 13], [0, 18], [0, 28]], [[0, 36]], [[0, 2], [0, 7], [0, 30]], [[0, 22]], [[0, 25], [0, 26]], [[0, 20], [0, 23], [0, 27], [0, 31]], [[0, 9], [0, 27], [0, 33], [0, 35]], [[0, 21], [0, 22]], [[0, 29], [0, 30]], [[0, 21], [0, 22], [0, 24]], [[0, 1], [0, 25]], [[0, 28], [0, 32], [0, 34]], [[0, 20], [0, 23]]], [[[0, 31], [1, 1], [1, 5], [1, 16], [1, 17]], [[0, 32], [1, 7], [1, 11], [1, 12], [1, 15]], [[0, 14], [0, 32], [1, 4], [1, 9], [1, 13]], [[0, 17], [1, 2], [1, 3], [1, 6], [1, 8]], [[1, 0], [1, 10], [1, 14]]], [[[2, 0], [2, 1], [2, 2], [2, 3], [2, 4]]]]
size: 28 # only for images
train_n: 60000 # only for images
test_n: 10000 # only for images
n: 1 # only for images
ins: 8 # only for custom circuits
outs: 1 # only for custom circuits
output: [[1], [0], [0], [0], [0], [1], [0], [0], [1], [0], [1], [1], [1], [1], [1], [1]] # should be 2^ins lists, each with outs elements (so look like a truth table)
traceback: "auto" #should be in: ['off', 'tracebackhide', 'remove_frames', 'quiet_remove_frames', 'auto']
output_file: "final_test.txt"
verbose: False
super_verbose: False
