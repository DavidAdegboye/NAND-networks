add_img_or_custom: 'a' # 'a' for adder, 'c' for custom, 'i' for image classifier
  #convs: [[2,1,8,27],
  #      [3,3,16,9],
  #      [3,3,32,3],
  #      [3,3,64,1]] # only for image, tuples of width, stride, channels, new_size
convs: []
pool_filters: [[3,1,"max"], [3,1,"min"]]
extra_layers: [[1,1]] # for everything but images
lr_dense: [0.003]
lr_conv: [0.03]
global_weights: True
dense_distribution: "normal_sampler2" # choose from beta_sampler, normal_sampler1, normal_sampler2
conv_distribution: "normal_sampler2"
dense_sigma: 1.5
dense_k: 0.75
conv_sigma: 1
conv_k: 0.85
taper_q: 'l' # 't' to exponentially decrease the number of neurons in each layer, 'l' to linearly decrease, 'f' for a set width and depth, 'c' for custom
taper: 0.5
architecture: [100, 50]
width: 100
hidden: 2
temperature: 0.5
max_fan_in_penalty_coeff: 0
max_fan_in: 8
mean_fan_in_penalty_coeff: 0
mean_fan_in: 5.2
max_gates_used_penalty_coeff: 0 # if using l3 or l5, check the gate usage output - if they're all integers, these will not work, you must increase the temperature
max_gates: [0, 0, 0, 0, 0]
min_gates_used_penalty_coeff: 0 # similary, if the difference between the discrete and continuous gate usage output is too big, decrease the temperature (and/or increase l4_coeff)
min_gates: [0, 0, 0, 0, 0]
continuous_penalty_coeff: 0
decimal_places: 5
batches: 50 # should be a factor of the number of samples
timeout: 120 # in minutes
bits: 7 # only for adders
out_bits: 2 # only for adders (should be at most bits+1)
add_adder_help: True # only for adders
with_nots: True # only for adders
use_surr: True # only for adders
surr_bits: 6
surr_arr: [[[[0, 23], [0, 24], [0, 26]], [[0, 25], [0, 29], [0, 33], [0, 36], [0, 39]], [[0, 22], [0, 25], [0, 26], [0, 30], [0, 34], [0, 37], [0, 40]], [[0, 1], [0, 7], [0, 22], [0, 25], [0, 27], [0, 28], [0, 29]], [[0, 3], [0, 9], [0, 25], [0, 29], [0, 33], [0, 36]], [[0, 22], [0, 25], [0, 29]], [[0, 2], [0, 8], [0, 25], [0, 29], [0, 31], [0, 32], [0, 33]], [[0, 15], [0, 20], [0, 26], [0, 30], [0, 34], [0, 35]], [[0, 22], [0, 25], [0, 26], [0, 30]], [[0, 26], [0, 30], [0, 34]], [[0, 14], [0, 19], [0, 26], [0, 30], [0, 31], [0, 32]], [[0, 16], [0, 21], [0, 26], [0, 30], [0, 34], [0, 37], [0, 38]], [[0, 26], [0, 30], [0, 34], [0, 37], [0, 40]], [[0, 22], [0, 25], [0, 26], [0, 30], [0, 34], [0, 37]]],
[[[0, 25], [0, 29], [1, 8], [1, 11], [1, 13]], [[0, 25], [0, 29], [0, 33], [0, 36], [0, 39], [1, 12]], [[0, 22], [1, 0], [1, 1], [1, 3], [1, 4], [1, 6]], [[0, 0], [0, 6], [0, 29], [0, 33], [0, 36], [1, 11], [1, 12]], [[0, 25], [0, 29], [0, 33], [0, 36], [1, 9], [1, 11], [1, 12]], [[0, 29], [0, 33], [1, 5], [1, 7], [1, 9], [1, 11], [1, 12]], [[0, 29], [0, 33], [0, 36], [0, 39], [1, 5], [1, 12]], [[0, 0], [0, 6], [0, 29], [1, 7], [1, 9], [1, 10], [1, 12]]],
[[[0, 22], [2, 0], [2, 1], [2, 4]], [[1, 2], [2, 2], [2, 3], [2, 5], [2, 6], [2, 7]]]]
size: 28 # only for images
train_n: 600 # only for images
test_n: 100 # only for images
n: 1 # only for images
ins: 2 # only for custom circuits
outs: 14 # only for custom circuits
output: [[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1],
         [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],
         [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1],
         [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]] # should be 2^ins lists, each with outs elements (so look like a truth table)
traceback: "auto" #should be in: ['off', 'tracebackhide', 'remove_frames', 'quiet_remove_frames', 'auto']
