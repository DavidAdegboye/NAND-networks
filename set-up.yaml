add_or_img: 'i' # 'a' for adder, 'c' for custom, 'i' for image classifier
convs: [[2,1,8,27],
        [3,3,16,9],
        [3,3,32,3],
        [3,3,64,1]] # only for image, tuples of width, stride, channels, new_size
  #convs: []
extra_layers: [[1,1]] # for everything but images
global_weights: True
sigma_i: 10
taper_q: 'l' # 't' to exponentially decrease the number of neurons in each layer, 'l' to linearly decrease, 'f' for a set width and depth, 'c' for custom
taper: 0.5
architecture: [100, 50]
width: 256
hidden: 3
temperature: 0.5
l2_coeff: 0
max_fan: 0
l3_coeff: 0 # if using l3 or l5, check the gate usage output - if they're all integers, these will not work, you must increase the temperature
max_gates: [0, 0, 0, 0, 0]
l4_coeff: 0
l5_coeff: 1 # similary, if the difference between the discrete and continuous gate usage output is too big, decrease the temperature (and/or increase l4_coeff)
min_gates: [66, 0, 0, 0, 0]
batches: 1000 # should be a factor of the number of samples
timeout: 120 # in minutes
threshold: 1000 # magnitude at which we mask out weights
bits: 8 # only for adders
out_bits: 9 # only for adders (should be at most bits+1)
add_adder_help: False # only for adders
with_nots: False # only for adders
add_comp: False # only for images, should be  if using conv layers
size: 28 # only for images
train_n: 60000 # only for images
test_n: 10000 # only for images
n: 1 # only for images
ins: 3 # only for custom circuits
outs: 2 # only for custom circuits
output: [[0, 0],
         [0, 1],
         [0, 1],
         [1, 0],
         [0, 1],
         [1, 0],
         [1, 0],
         [1, 1]] # should be 2^ins lists, each with outs elements (so look like a truth table)
         
